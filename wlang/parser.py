#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by TatSu.
#
#    https://pypi.python.org/pypi/tatsu/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import generator_stop

import sys

from tatsu.buffering import Buffer
from tatsu.parsing import Parser
from tatsu.parsing import tatsumasu, leftrec, nomemo
from tatsu.parsing import leftrec, nomemo  # noqa
from tatsu.util import re, generic_main  # noqa


KEYWORDS = {}  # type: ignore


class WhileLangBuffer(Buffer):
    def __init__(
        self,
        text,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re='#[^\\r\\n]*',
        ignorecase=None,
        namechars='',
        **kwargs
    ):
        super().__init__(
            text,
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            namechars=namechars,
            **kwargs
        )


class WhileLangParser(Parser):
    def __init__(
        self,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re='#[^\\r\\n]*',
        ignorecase=None,
        left_recursion=True,
        parseinfo=True,
        keywords=None,
        namechars='',
        tokenizercls=WhileLangBuffer,
        **kwargs
    ):
        if keywords is None:
            keywords = KEYWORDS
        super().__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            parseinfo=parseinfo,
            keywords=keywords,
            namechars=namechars,
            tokenizercls=tokenizercls,
            **kwargs
        )

    @tatsumasu()
    def _start_(self):  # noqa
        self._stmt_list_()

    @tatsumasu()
    def _stmt_list_(self):  # noqa

        def sep0():
            self._token(';')

        def block0():
            self._stmt_()
        self._positive_gather(block0, sep0)

    @tatsumasu()
    def _stmt_(self):  # noqa
        with self._choice():
            with self._option():
                self._skip_stmt_()
            with self._option():
                self._asgn_stmt_()
            with self._option():
                self._block_stmt_()
            with self._option():
                self._if_stmt_()
            with self._option():
                self._while_stmt_()
            with self._option():
                self._assert_stmt_()
            with self._option():
                self._assume_stmt_()
            with self._option():
                self._havoc_stmt_()
            with self._option():
                self._print_state_stmt_()
            self._error('expecting one of: asgn_stmt assert assert_stmt assume assume_stmt block_stmt havoc havoc_stmt if if_stmt name print_state print_state_stmt skip skip_stmt while while_stmt {')

    @tatsumasu()
    def _asgn_stmt_(self):  # noqa
        self._name_()
        self.name_last_node('lhs')
        self._token(':=')
        self._aexp_()
        self.name_last_node('rhs')
        self.ast._define(
            ['lhs', 'rhs'],
            []
        )

    @tatsumasu()
    def _block_stmt_(self):  # noqa
        self._token('{')
        self._stmt_list_()
        self.name_last_node('@')
        self._token('}')

    @tatsumasu()
    def _skip_stmt_(self):  # noqa
        self._token('skip')

    @tatsumasu()
    def _print_state_stmt_(self):  # noqa
        self._token('print_state')

    @tatsumasu()
    def _if_stmt_(self):  # noqa
        self._token('if')
        self._cut()
        self._bexp_()
        self.name_last_node('cond')
        self._token('then')
        self._stmt_()
        self.name_last_node('then_stmt')
        with self._optional():
            self._token('else')
            self._stmt_()
            self.name_last_node('else_stmt')
        self.ast._define(
            ['cond', 'else_stmt', 'then_stmt'],
            []
        )

    @tatsumasu()
    def _while_stmt_(self):  # noqa
        self._token('while')
        self._bexp_()
        self.name_last_node('cond')
        with self._optional():
            self._token('inv')
            self._bexp_()
            self.name_last_node('inv')
        self._token('do')
        self._stmt_()
        self.name_last_node('body')
        self.ast._define(
            ['body', 'cond', 'inv'],
            []
        )

    @tatsumasu()
    def _assert_stmt_(self):  # noqa
        self._token('assert')
        self._bexp_()
        self.name_last_node('cond')
        self.ast._define(
            ['cond'],
            []
        )

    @tatsumasu()
    def _assume_stmt_(self):  # noqa
        self._token('assume')
        self._bexp_()
        self.name_last_node('cond')
        self.ast._define(
            ['cond'],
            []
        )

    @tatsumasu()
    def _havoc_stmt_(self):  # noqa
        self._token('havoc')
        self._var_list_()
        self.name_last_node('vars')
        self.ast._define(
            ['vars'],
            []
        )

    @tatsumasu()
    def _var_list_(self):  # noqa

        def sep0():
            self._token(',')

        def block0():
            self._name_()
        self._positive_gather(block0, sep0)

    @tatsumasu()
    def _bexp_(self):  # noqa

        def sep0():
            with self._group():
                self._token('or')
                self.name_last_node('op')

        def block0():
            self._bterm_()
            self.name_last_node('args')
        self._positive_gather(block0, sep0)
        self.ast._define(
            ['args'],
            []
        )

    @tatsumasu()
    def _bterm_(self):  # noqa

        def sep0():
            with self._group():
                self._token('and')
                self.name_last_node('op')

        def block0():
            self._bfactor_()
            self.name_last_node('args')
        self._positive_gather(block0, sep0)
        self.ast._define(
            ['args'],
            []
        )

    @tatsumasu()
    def _bfactor_(self):  # noqa
        with self._choice():
            with self._option():
                self._batom_()
                self.name_last_node('arg')
            with self._option():
                self._token('not')
                self.name_last_node('op')
                self._cut()
                self._batom_()
                self.name_last_node('arg')
            self._error('expecting one of: ( batom bool_const not rexp')
        self.ast._define(
            ['arg', 'op'],
            []
        )

    @tatsumasu()
    def _batom_(self):  # noqa
        with self._choice():
            with self._option():
                self._rexp_()
            with self._option():
                self._bool_const_()
            with self._option():
                self._token('(')
                self._bexp_()
                self.name_last_node('@')
                self._token(')')
            self._error('expecting one of: ( aexp bool_const false rexp true')

    @tatsumasu()
    def _bool_const_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('true')
            with self._option():
                self._token('false')
            self._error('expecting one of: false true')

    @tatsumasu()
    def _rexp_(self):  # noqa
        self._aexp_()
        self.name_last_node('lhs')
        self._rop_()
        self.name_last_node('op')
        self._cut()
        self._aexp_()
        self.name_last_node('rhs')
        self.ast._define(
            ['lhs', 'op', 'rhs'],
            []
        )

    @tatsumasu()
    def _rop_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('<=')
            with self._option():
                self._token('<')
            with self._option():
                self._token('=')
            with self._option():
                self._token('>=')
            with self._option():
                self._token('>')
            self._error('expecting one of: < <= = > >=')

    @tatsumasu()
    def _aexp_(self):  # noqa
        with self._choice():
            with self._option():
                self._addition_()
            with self._option():
                self._subtraction_()
            with self._option():
                self._term_()
            self._error('expecting one of: addition division factor mult subtraction term')

    @tatsumasu()
    def _addition_(self):  # noqa
        self._term_()
        self.name_last_node('lhs')
        self._token('+')
        self.name_last_node('op')
        self._cut()
        self._aexp_()
        self.name_last_node('rhs')
        self.ast._define(
            ['lhs', 'op', 'rhs'],
            []
        )

    @tatsumasu()
    def _subtraction_(self):  # noqa
        self._term_()
        self.name_last_node('lhs')
        self._token('-')
        self.name_last_node('op')
        self._cut()
        self._aexp_()
        self.name_last_node('rhs')
        self.ast._define(
            ['lhs', 'op', 'rhs'],
            []
        )

    @tatsumasu()
    def _term_(self):  # noqa
        with self._choice():
            with self._option():
                self._mult_()
            with self._option():
                self._division_()
            with self._option():
                self._factor_()
            self._error('expecting one of: ( atom division factor mult neg_number')

    @tatsumasu()
    def _mult_(self):  # noqa
        self._factor_()
        self.name_last_node('lhs')
        self._token('*')
        self.name_last_node('op')
        self._cut()
        self._term_()
        self.name_last_node('rhs')
        self.ast._define(
            ['lhs', 'op', 'rhs'],
            []
        )

    @tatsumasu()
    def _division_(self):  # noqa
        self._factor_()
        self.name_last_node('lhs')
        self._token('/')
        self.name_last_node('op')
        self._cut()
        self._term_()
        self.name_last_node('rhs')
        self.ast._define(
            ['lhs', 'op', 'rhs'],
            []
        )

    @tatsumasu()
    def _factor_(self):  # noqa
        with self._choice():
            with self._option():
                self._atom_()
            with self._option():
                self._neg_number_()
            with self._option():
                self._token('(')
                self._aexp_()
                self.name_last_node('@')
                self._token(')')
            self._error('expecting one of: ( - atom name neg_number number')

    @tatsumasu()
    def _neg_number_(self):  # noqa
        self._token('-')
        self._cut()
        self._number_()
        self.name_last_node('@')

    @tatsumasu()
    def _atom_(self):  # noqa
        with self._choice():
            with self._option():
                self._name_()
            with self._option():
                self._number_()
            self._error('expecting one of: INT NAME name number')

    @tatsumasu()
    def _name_(self):  # noqa
        self._NAME_()

    @tatsumasu()
    def _number_(self):  # noqa
        self._INT_()

    @tatsumasu()
    def _INT_(self):  # noqa
        self._pattern('0[xX][0-9a-fA-F]+|[0-9]+')

    @tatsumasu()
    def _NAME_(self):  # noqa
        self._pattern('(?!\\d)\\w+')

    @tatsumasu()
    def _NEWLINE_(self):  # noqa
        self._pattern('[\\u000C\\r\\n]+')
        self._cut()


class WhileLangSemantics(object):
    def start(self, ast):  # noqa
        return ast

    def stmt_list(self, ast):  # noqa
        return ast

    def stmt(self, ast):  # noqa
        return ast

    def asgn_stmt(self, ast):  # noqa
        return ast

    def block_stmt(self, ast):  # noqa
        return ast

    def skip_stmt(self, ast):  # noqa
        return ast

    def print_state_stmt(self, ast):  # noqa
        return ast

    def if_stmt(self, ast):  # noqa
        return ast

    def while_stmt(self, ast):  # noqa
        return ast

    def assert_stmt(self, ast):  # noqa
        return ast

    def assume_stmt(self, ast):  # noqa
        return ast

    def havoc_stmt(self, ast):  # noqa
        return ast

    def var_list(self, ast):  # noqa
        return ast

    def bexp(self, ast):  # noqa
        return ast

    def bterm(self, ast):  # noqa
        return ast

    def bfactor(self, ast):  # noqa
        return ast

    def batom(self, ast):  # noqa
        return ast

    def bool_const(self, ast):  # noqa
        return ast

    def rexp(self, ast):  # noqa
        return ast

    def rop(self, ast):  # noqa
        return ast

    def aexp(self, ast):  # noqa
        return ast

    def addition(self, ast):  # noqa
        return ast

    def subtraction(self, ast):  # noqa
        return ast

    def term(self, ast):  # noqa
        return ast

    def mult(self, ast):  # noqa
        return ast

    def division(self, ast):  # noqa
        return ast

    def factor(self, ast):  # noqa
        return ast

    def neg_number(self, ast):  # noqa
        return ast

    def atom(self, ast):  # noqa
        return ast

    def name(self, ast):  # noqa
        return ast

    def number(self, ast):  # noqa
        return ast

    def INT(self, ast):  # noqa
        return ast

    def NAME(self, ast):  # noqa
        return ast

    def NEWLINE(self, ast):  # noqa
        return ast


def main(filename, start=None, **kwargs):
    if start is None:
        start = 'start'
    if not filename or filename == '-':
        text = sys.stdin.read()
    else:
        with open(filename) as f:
            text = f.read()
    parser = WhileLangParser()
    return parser.parse(text, rule_name=start, filename=filename, **kwargs)


if __name__ == '__main__':
    import json
    from tatsu.util import asjson

    ast = generic_main(main, WhileLangParser, name='WhileLang')
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(asjson(ast), indent=2))
    print()
